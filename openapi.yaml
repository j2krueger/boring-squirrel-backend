openapi: 3.1.0
info:
  title: Project Title
  description: "Project Description"
  version: 1.0.0
servers:
  - url: /
paths:
  /register:
    summary: GET/POST registration
    post:
      tags:
        - User
      summary: Register a new user
      description:
        "Register a new user by posting a new username, an email address,
        and a password. Check for unique username, send verification email, and
        store password."
      operationId: register_user
      requestBody:
        description: Submit a request to register a user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Register"
            example:
              {
                "username": "EasterBunny",
                "email": "EasterBunny@example.com",
                "password": "12345678",
              }
      responses:
        "201":
          description: "If the registration is successful, return the users private profile information to indicate success."
          content:
            application/json:
              example:
                {
                  "userId": "66ce0c8dc538303360039d01",
                  "username": "EasterBunny",
                  "email": "EasterBunny@example.com",
                  "bio": "I haven't decided what to put in my bio yet.",
                  "publishEmail": false,
                  "darkMode": false,
                  "emailVerified": false,
                }
        "400":
          description: "If any of the fields are missing, too long, or too short, return an error."
          content:
            application/json:
              examples:
                missingPassword:
                  value: { "error": "Missing password." }
                shortPassword:
                  value:
                    { "error": "Password must be at least 6 characters long." }
                missingUsername:
                  value: { "error": "Missing username." }
                longUsername:
                  value:
                    { error: "Username may not be longer than 20 characters." }
                missingEmail:
                  value: { "error": "Missing email." }
        "409":
          description: "username or Email are already in use."
          content:
            application/json:
              examples:
                duplicateUsername:
                  value: { "error": "username already in use." }
                duplicateEmail:
                  value: { "error": "Email already in use." }
  /google:
    summary: GET to initiate Google SSO
    get:
      tags:
        - user
      summary: GET to initiate Google SSO
      description: GET the user's Google SSO profile and log them in.
      operationId: google_sso
      responses:
        "200":
          description: Success!
          content:
            application/json:
              example:
                {
                  "id": "112044111156969565327",
                  "displayName": "John Krueger",
                  "name": { "familyName": "Krueger", "givenName": "John" },
                  "emails":
                    [
                      {
                        "value": "jentlejeniuskat@gmail.com",
                        "verified": true,
                      },
                    ],
                  "photos":
                    [
                      {
                        "value": "https://lh3.googleusercontent.com/a/ACg8ocKmr5OmoIa3C5iqE0f0u8MoW3ac4sl4S36wukFD-zSpITLgkA=s96-c",
                      },
                    ],
                  "provider": "google",
                  "_raw": "{\n  \"sub\": \"112044111156969565327\",\n  \"name\": \"John Krueger\",\n  \"given_name\": \"John\",\n  \"family_name\": \"Krueger\",\n  \"picture\": \"https://lh3.googleusercontent.com/a/ACg8ocKmr5OmoIa3C5iqE0f0u8MoW3ac4sl4S36wukFD-zSpITLgkA\\u003ds96-c\",\n  \"email\": \"jentlejeniuskat@gmail.com\",\n  \"email_verified\": true\n}",
                  "_json":
                    {
                      "sub": "112044111156969565327",
                      "name": "John Krueger",
                      "given_name": "John",
                      "family_name": "Krueger",
                      "picture": "https://lh3.googleusercontent.com/a/ACg8ocKmr5OmoIa3C5iqE0f0u8MoW3ac4sl4S36wukFD-zSpITLgkA=s96-c",
                      "email": "jentlejeniuskat@gmail.com",
                      "email_verified": true,
                    },
                }
        "400":
          description: failure
          content:
            application/json:
              example: { "error": "Authentication failed" }
  /login:
    summary: POST login
    post:
      tags:
        - User
      summary: Login user
      description:
        "Post the username and password entered by the user, name may be either a username or an email,
        username checked first. If the name matches a user and the password is correct for that user,
        log them in."
      operationId: login_user
      requestBody:
        description: Submit a request to login
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
            example: { "username": "EasterBunny", "password": "12345678" }
      responses:
        "200":
          description: "If the login is successful, return the users private profile information to indicate success."
          content:
            application/json:
              example:
                {
                  "userId": "66ce0c8dc538303360039d01",
                  "username": "EasterBunny",
                  "email": "EasterBunny@example.com",
                  "admin": false,
                  "moderator": false,
                  "bio": "I haven't decided what to put in my bio yet.",
                  "publishEmail": false,
                  "darkMode": false,
                  "locked": false,
                  "emailVerified": true,
                  "publishedChapters": [],
                  "followedAuthors": [],
                  "likedChapters": [],
                  "bookmarkedChapters": [],
                }
        "400":
          description: "Missing field."
          content:
            application/json:
              examples:
                missingName:
                  value: { "error": "Missing name." }
                missingPassword:
                  value: { "error": "Missing password." }
        "401":
          description: "Login failed."
          content:
            application/json:
              example: { "error": "Incorrect name or password." }
  /logout:
    summary: POST logout
    post:
      tags:
        - User
      summary: Logout the logged in user.
      description:
        "Logout the logged in user. Posted by a button on the users profile\
        \ page, or from the user menu."
      operationId: logout_user
      responses:
        "200":
          description:
            "Logout should always be successful. If user was logged in\
            \ before request, the cookie will indicate the user to log out. If user\
            \ was not logged in before request, user will still not be logged in,\
            \ so we'll call that a success condition too."
          content:
            application/json:
              example: { "message": "Logout successful." }
  /profile:
    summary: GET the user's profile information
    get:
      tags:
        - user
      summary: GET the user's profile information
      description: GET ethe user's profile information, returning all fields listed in privateProfileFields as specified in ~/helpers/globals.js
      operationId: get_profile
      responses:
        "200":
          description: Success!
          content:
            application/json:
              example:
                {
                  "id": 23,
                  "username": "john",
                  "email": "john@example.com",
                  "bio": "This is my bio.",
                }
        "404":
          description: No logged in user
          content:
            application/json:
              example: { "error": "No user logged in." }
    put:
      tags:
        - user
      summary: PUT the user's new profile information
      description: PUT new or updated information, and change the logged in user's database entry appropriately.
      operationId: put_profile
      requestBody:
        description: A JSON object containing the new or updated information.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Profile"
            example:
              {
                "username": "Freddy",
                "password": "s33kr!t",
                "email": "Freddy@example.com",
                "bio": "I'm just a D00D.",
              }
      responses:
        "200":
          description: "If the change is successful, return the users private profile information to indicate success."
          content:
            application/json:
              example:
                {
                  "username": "Freddy",
                  "email": "Freddy@example.com",
                  "bio": "I'm just a D00D.",
                }
        "400":
          description: "If one of the submitted fields is the wrong type, return an error."
          content:
            application/json:
              example: { "error": "Invalid request." }
        "409":
          description: "Username or email is already in use."
          content:
            application/json:
              example:
                { "error": "Invalid request: That email is already in use." }
  /users:
    summary: GET a list of all users
    get:
      tags:
        - user
      summary: GET a list of all users
      description: GET a list of all users, returning all fields listed in summaryProfileFields as specified in ~/helpers/globals.js
      operationId: get_users
      responses:
        "200":
          description: Success!
          content:
            application/json:
              example:
                [
                  {
                    "id": 17,
                    "username": "Freddy",
                    "bio": "I stole john's bio.",
                  },
                  { "id": 23, "username": "john", "bio": "This is my bio." },
                ]
  /users/{userId}:
    summary: GET the public information of a user by user id.
    get:
      tags:
        - user
      summary: GET the public information of a user by user id.
      description: GET the public information of a user by user id, returning all fields listed in publicProfileFields as specified in ~/helpers/globals.js
      operationId: get_user_by_id
      parameters:
        - name: userId
          in: path
          description: the ID of the user
          required: true
          style: simple
          explode: false
          schema: {}
      responses:
        "200":
          description: Success!
          content:
            application/json:
              example:
                {
                  "id": 23,
                  "username": "john",
                  "bio": "This is my bio.",
                  "createdAt": "2025-06-17T15:21:10.353Z",
                }
        "400":
          description: User id is not in the correct format.
          content:
            application/json:
              example: { "error": "That is not a properly formatted userId." }
        "404":
          description: User not found.
          content:
            application/json:
              example: { "error": "There is no user with that userId." }
  /newsletter:
    summary: Submit an email address to recieve a newsletter
    post:
      tags:
        - misc
      summary: Submit an email address to recieve a newsletter
      description:
        POST an email address to the server to recive a newsletter. On success this will return a status of
        200 and the new database entry. On error, the route will return a relevant status and error message.
      operationId: post_newsletter
      requestBody:
        description: The email address to add to the database.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Newsletter"
            example: { "address": "EasterBunny@example.com" }
      responses:
        "200":
          description: "If the registration is successful, return the users private profile information to indicate success."
          content:
            application/json:
              example: { "id": "23", "address": "EasterBunny@example.com" }
        "400":
          description: "If address is missing or not a string, return an error."
          content:
            application/json:
              example: { "error": "Address must be a string." }
        "409":
          description: "address is already in the database."
          content:
            application/json:
              example: { "error": "Address is already in database." }
components:
  schemas:
    Register:
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
    Login:
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    Profile:
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string
        bio:
          type: string
    Newsletter:
      required:
        - address
      properties:
        address:
          type: string
